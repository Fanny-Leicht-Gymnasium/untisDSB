name: Go Build for Multiple Platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ] # Multiple OS platforms
        arch: [ amd64, arm ] # Added ARM support for Raspberry Pi 3B+
        exclude:
          - os: macos-latest
            arch: arm  # ‚ùå Remove invalid macOS/ARM pair
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22.1'

    - name: Build the project
      run: |
        # Determine GOOS based on matrix OS
        case "${{ matrix.os }}" in
          ubuntu-latest) GOOS=linux ;;
          windows-latest) GOOS=windows ;;
          macos-latest) GOOS=darwin ;;
          *) echo "Unsupported OS" && exit 1 ;;
        esac

        GOARCH=${{ matrix.arch }}
        
        # Set GOARM flag for ARM builds (for Raspberry Pi)
        if [ "$GOARCH" = "arm" ]; then
          GOARM=7
        fi

        echo "Building for $GOOS $GOARCH GOARM=${GOARM:-}"

        # Define build output directory
        BUILD_DIR="build/$GOOS/$GOARCH/untisDSB"
        mkdir -p $BUILD_DIR

        # Build the project
        env GOOS=$GOOS GOARCH=$GOARCH GOARM=${GOARM:-} go build -o $BUILD_DIR/untisDSB${{ matrix.os == 'windows-latest' && '.exe' || '' }} main.go

    - name: Test
      run: go test -v ./...

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: untisDSB-${{ matrix.os }}-${{ matrix.arch }}
        path: build/${{ matrix.os }}/{{ matrix.arch }}/untisDSB*

    - name: List build artifacts
      run: ls -R build
